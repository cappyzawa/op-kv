// Code generated by counterfeiter. DO NOT EDIT.
package opkvfakes

import (
	sync "sync"

	opkv "github.com/cappyzawa/op-kv"
)

type FakeRunner struct {
	OutputStub        func(...[]string) ([]byte, error)
	outputMutex       sync.RWMutex
	outputArgsForCall []struct {
		arg1 [][]string
	}
	outputReturns struct {
		result1 []byte
		result2 error
	}
	outputReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRunner) Output(arg1 ...[]string) ([]byte, error) {
	fake.outputMutex.Lock()
	ret, specificReturn := fake.outputReturnsOnCall[len(fake.outputArgsForCall)]
	fake.outputArgsForCall = append(fake.outputArgsForCall, struct {
		arg1 [][]string
	}{arg1})
	fake.recordInvocation("Output", []interface{}{arg1})
	fake.outputMutex.Unlock()
	if fake.OutputStub != nil {
		return fake.OutputStub(arg1...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.outputReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRunner) OutputCallCount() int {
	fake.outputMutex.RLock()
	defer fake.outputMutex.RUnlock()
	return len(fake.outputArgsForCall)
}

func (fake *FakeRunner) OutputCalls(stub func(...[]string) ([]byte, error)) {
	fake.outputMutex.Lock()
	defer fake.outputMutex.Unlock()
	fake.OutputStub = stub
}

func (fake *FakeRunner) OutputArgsForCall(i int) [][]string {
	fake.outputMutex.RLock()
	defer fake.outputMutex.RUnlock()
	argsForCall := fake.outputArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRunner) OutputReturns(result1 []byte, result2 error) {
	fake.outputMutex.Lock()
	defer fake.outputMutex.Unlock()
	fake.OutputStub = nil
	fake.outputReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRunner) OutputReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.outputMutex.Lock()
	defer fake.outputMutex.Unlock()
	fake.OutputStub = nil
	if fake.outputReturnsOnCall == nil {
		fake.outputReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.outputReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRunner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.outputMutex.RLock()
	defer fake.outputMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRunner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ opkv.Runner = new(FakeRunner)
